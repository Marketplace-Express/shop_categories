<?php

namespace Shop_categories\Models;
use Phalcon\Mvc\Model\Behavior\NestedSet;
use Phalcon\Mvc\Model\Behavior\SoftDelete;
use Phalcon\Mvc\Model\Behavior\Timestampable;
use Phalcon\Mvc\Model\ResultInterface;
use Shop_categories\Traits\ModelBehaviorTrait;

/**
 * Category
 * 
 * @package Shop_categories\Models
 * @autogenerated by Phalcon Developer Tools
 * @date 2018-07-24, 18:21:39
 * @method  moveAsLast(ResultInterface $parent)
 * @method  saveNode(array $data)
 */
class Category extends \Phalcon\Mvc\Model
{
    use ModelBehaviorTrait;

    /**
     *
     * @var string
     * @Primary
     * @Column(column="category_id", type="string", length=36, nullable=false)
     */
    protected $categoryId;

    /**
     *
     * @var string
     * @Column(column="category_name", type="string", length=255, nullable=false)
     */
    protected $categoryName;

    /**
     *
     * @var string
     * @Column(column="category_parent_id", type="string", length=36, nullable=true)
     */
    protected $categoryParentId;

    /**
     *
     * @var integer
     * @Column(column="lft", type="integer", length=11, nullable=false)
     */
    protected $lft;

    /**
     *
     * @var integer
     * @Column(column="rgt", type="integer", length=11, nullable=false)
     */
    protected $rgt;

    /**
     *
     * @var integer
     * @Column(column="rgt", type="integer", length=11, nullable=false)
     */
    protected $level;

    /**
     * @var string
     * @Column(column="created_at", type="string", length=19, nullable=false)
     */
    protected $createdAt;

    /**
     * @var string
     * @Column(column="updated_at", type="string", length=19, nullable=true)
     */
    protected $updatedAt;

    /**
     * @var string
     * @Column(column="deleted_at", type="string", length=19, nullable=true)
     */
    protected $deletedAt;

    /**
     *
     * @var integer
     * @Column(column="is_deleted", type="boolean", length=1, nullable=true)
     */
    protected $isDeleted = 0;

    /**
     * Method to set the value of field category_id
     *
     * @param string $categoryId
     * @return $this
     */
    public function setCategoryId($categoryId)
    {
        $this->categoryId = $categoryId;

        return $this;
    }

    /**
     * Method to set the value of field category_name
     *
     * @param string $categoryName
     * @return $this
     */
    public function setCategoryName($categoryName)
    {
        $this->categoryName = $categoryName;

        return $this;
    }

    /**
     * Method to set the value of field category_parent_id
     *
     * @param string $categoryParentId
     * @return $this
     */
    public function setCategoryParentId($categoryParentId)
    {
        $this->categoryParentId = $categoryParentId;

        return $this;
    }

    /**
     * Method to set the value of field lft
     *
     * @param integer $lft
     * @return $this
     */
    public function setLft($lft)
    {
        $this->lft = $lft;

        return $this;
    }

    /**
     * Method to set the value of field rgt
     *
     * @param integer $rgt
     * @return $this
     */
    public function setRgt($rgt)
    {
        $this->rgt = $rgt;

        return $this;
    }

    /**
     * @param int $level
     */
    public function setLevel(int $level): void
    {
        $this->level = $level;
    }

    /**
     * @param string $createdAt
     */
    public function setCreatedAt(string $createdAt): void
    {
        $this->createdAt = $createdAt;
    }

    /**
     * @param string|null $updatedAt
     */
    public function setUpdatedAt(?string $updatedAt): void
    {
        $this->updatedAt = $updatedAt;
    }

    /**
     * @param null|string $deletedAt
     */
    public function setDeletedAt(?string $deletedAt): void
    {
        $this->updatedAt = $deletedAt;
    }

    /**
     * @param bool $isDeleted
     */
    public function setIsDeleted(bool $isDeleted): void
    {
        $this->isDeleted = $isDeleted;
    }

    /**
     * Returns the value of field categoryId
     *
     * @return string
     */
    public function getCategoryId()
    {
        return $this->categoryId;
    }

    /**
     * Returns the value of field categoryName
     *
     * @return string
     */
    public function getCategoryName()
    {
        return $this->categoryName;
    }

    /**
     * Returns the value of field categoryParentId
     *
     * @return string
     */
    public function getCategoryParentId()
    {
        return $this->categoryParentId;
    }

    /**
     * Returns the value of field lft
     *
     * @return integer
     */
    public function getLft()
    {
        return $this->lft;
    }

    /**
     * Returns the value of field rgt
     *
     * @return integer
     */
    public function getRgt()
    {
        return $this->rgt;
    }

    /**
     * @return int
     */
    public function getLevel(): int
    {
        return $this->level;
    }

    /**
     * @return string
     */
    public function getCreatedAt(): string
    {
        return $this->createdAt;
    }

    /**
     * @return string|null
     */
    public function getUpdatedAt(): ?string
    {
        return $this->updatedAt;
    }

    /**
     * @return string|null
     */
    public function getDeletedAt(): ?string
    {
        return $this->deletedAt;
    }

    /**
     * @return bool
     */
    public function getisDeleted()
    {
        return $this->isDeleted;
    }

    /**
     * Initialize method for model.
     */
    public function initialize()
    {
        $this->setSchema("shop_categories");
        $this->setSource("category");
        $this->useDynamicUpdate(true);

        $this->defaultBehavior();

        $this->addBehavior(new NestedSet([
            'hasManyRoots' => true,
            'primaryKey' => 'categoryId',
            'rootAttribute' => 'categoryParentId'
        ]));


        $this->belongsTo(
            'categoryId',
            'CategoryVendor',
            'categoryId',
            [
                'alias' => 'categoryVendor'
            ]
        );
    }

    /**
     * Returns table name mapped in the model.
     *
     * @return string
     */
    public function getSource()
    {
        return 'category';
    }

    /**
     * Independent Column Mapping.
     * Keys are the real names in the table and the values their names in the application
     *
     * @return array
     */
    public function columnMap()
    {
        return [
            'category_id' => 'categoryId',
            'category_name' => 'categoryName',
            'category_parent_id' => 'categoryParentId',
            'lft' => 'lft',
            'rgt' => 'rgt',
            'level' => 'level',
            'created_at' => 'createdAt',
            'updated_at' => 'updatedAt',
            'deleted_at' => 'deletedAt',
            'is_deleted' => 'isDeleted'
        ];
    }
}
